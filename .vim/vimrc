let g:ale_disable_lsp = 1

source ~/.vim/plugins.vim

" UI
set guioptions=1
set background=dark
let g:airline_theme='miramare'
let g:airline_powerline_fonts = 1
let g:miramare_transparent_background = 1
set backspace=indent,eol,start
set pumblend=20
" important!!
set termguicolors

colorscheme gruvbox
" colorscheme miramare

" use spaces instead of tabs
set tabstop=2
set shiftwidth=2
set expandtab

" buffer stuff
" set hidden

" enable mouse
set mouse=a

" enable line numbers
set number relativenumber
set nu rnu
" highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" prettier
let g:prettier#quickfix_auto_focus = 0
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.ts,*.css,*.scss,*.json,*.md,*.yaml,*.html PrettierAsync


" indentation
filetype plugin indent on

" map
let mapleader=" "
let maplocalleader="  "
nmap <F1> <nop>
map <F2> orequire 'pry'; binding.pry unless $pstop<ESC>
nnoremap <silent> <F3> :Rgrep<CR>*
nnoremap <F4> <C-]>
nnoremap <expr> <leader>r 'ci' . nr2char(getchar()) . '<C-R>0<ESC>'

" rb
autocmd FileType ruby map <buffer> <F2> orequire 'pry'; binding.pry unless $pstop<ESC>

" js
autocmd FileType javascript map <buffer> <F2> odebugger;<ESC>

" ts
autocmd FileType typescript map <buffer> <F2> odebugger;<ESC>

" CtrlP
set wildignore+=*coverage/*,*tmp/*,*node_modules/*,*dist/*,*.so,*.swp,*.zip
nnoremap scp :CtrlP<CR>
nnoremap scl :CtrlP .<CR>
nnoremap scb :CtrlPBuffer<CR>
nnoremap scr :CtrlPMRU<CR>
nnoremap sct :CtrlPTag<CR>
nnoremap scp :CtrlP %:h<CR>

" navigation
nmap <leader>k :wincmd k<CR>
nmap <leader>j :wincmd j<CR>
nmap <leader>h :wincmd h<CR>
nmap <leader>l :wincmd l<CR>

" undotree
nnoremap <leader>u :UndotreeShow<cr> :UndotreeFocus<cr>

" tsuquyomi
" let g:tsuquyomi_disable_quickfix = 1
" let g:syntastic_typescript_checkers = ['tsuquyomi']
" let g:tsuquyomi_single_quote_import = 1
" nnoremap td :TsuDefinition<CR>
" nnoremap ti :TsuImport<CR>
" nnoremap ts :TsuSearch<CR>
" nnoremap tr :TsuRenameSymbol<CR>

" ctags
nnoremap <F5> :!~/.vim/bin/ctags.sh<CR>
set tags=./tags;/

cabbrev E Explore

" closetag
let g:closetag_filenames = "*.hbs, *.html"

" grep
let Grep_Skip_Dirs = 'node_modules tmp coverage'
let Grep_Skip_Files = 'tags'

" search
set incsearch
set hlsearch
hi Search guibg=LightBlue


" Diffing
if &diff
  set cursorline
  map ] ]c
  map [ [c
  " hi DiffAdd    ctermfg=233 ctermbg=LightGreen guifg=#003300 guibg=#DDFFDD gui=none cterm=none
  " hi DiffChange ctermbg=white  guibg=#ececec gui=none   cterm=none
  " hi DiffText   ctermfg=233  ctermbg=yellow  guifg=#000033 guibg=#DDDDFF gui=none cterm=none
  set diffopt=iwhite
  set wrap
endif
"
" CoC

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <cr> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm() :
        \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
"
" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Renaming
nmap <leader>rn <Plug>(coc-rename)
" GoTo code navigation.
nmap <silent> gdv <C-W>v<Plug>(coc-definition)
nmap <silent> gds <C-W>s<Plug>(coc-definition)
nmap <silent> gdd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" vista.vim
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

set statusline+=%{NearestMethodOrFunction()}

" By default vista.vim never run if you don't call it explicitly.
"
" If you want to show the nearest function in your statusline automatically,
" you can add the following line to your vimrc
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

let g:vista_default_executive = 'coc'

" fzf
" let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
" let $FZF_DEFAULT_OPTS='--reverse'
" nnoremap <C-p> :GFiles<CR>
" let g:fzf_buffers_jump = 1

" telescope
nnoremap <C-p> <cmd>Telescope find_files<cr>
nnoremap <C-g> <cmd>Telescope live_grep<cr>

" modifyOtherKeys
let &t_TI = ""
let &t_TE = ""

" fugitive
nmap <leader>gh :diffget //3<CR>
nmap <leader>gf :diffget //2<CR>
nmap <leader>gs :G<CR><C-w>T

" tex
let g:tex_flavor = 'latex'

" Stop confusing bracket highlighting 
function! g:FckThatMatchParen ()
    if exists(":NoMatchParen")
        :NoMatchParen
    endif
endfunction

autocmd VimEnter * call FckThatMatchParen()

" NERDTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <leader><C-n> :NERDTree<CR>
nnoremap <leader><C-t> :NERDTreeToggle<CR>
nnoremap <leader><C-f> :NERDTreeFind<CR>
let NERDTreeShowLineNumbers=1
autocmd VimEnter * NERDTreeTabsOpen
autocmd VimEnter * NERDTreeFocusToggle

imap <C-a> ä
imap <C-o> ö
imap <C-u> ü

set foldlevelstart=20

" Ale
nnoremap <leader>af :ALEFix<CR>

" treesitter
lua require'nvim-treesitter.configs'.setup{highlight={enable=true}}
